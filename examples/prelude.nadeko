;;bool
(synonym Bool (Fn a a a))
(synonym Map  (lambda [a b] `(List (Pair ,a ,b))))

(= (true  Bool) t e t)
(= (false Bool) t e e)
(= (not Bool Bool)
   bool (bool false true))
(= (if Bool a a a) bool bool)

;;function
(= (comp (Fn b c) (Fn a b) a c)
   f g x (f (g x)))
(= (compose (Fn b c) (Fn a b) a c) comp)
(= (flip (Fn a b c) b a c)
   f x y (f y x))

(= (id a a) x x)
(= (/> a (Fn a b) b)
   x f (f x))
(= (-> a (Fn b c) (Fn a b) c)
   x f g (f (g x)))
(= (<- a a) x x)
;;e.g. (-> 2 -> (+ 1) -> (+ 4) -> (+ 3) <- (+ 6))


;;tuple
(=u (pair a b (Pair a b))
    x y f (f x y))
(= (fst (Pair a b) a) t (t (^ x _ x)))
(= (snd (Pair a b) b) t (t (^ _ y y)))

;;list
(=u (cons a (List a) (List a))
    x y f (f x y))
(=u (nil (List a)) 'nil)
(= (car (List a) a) xs (xs (^ x _ x)))
(= (cdr (List a) (List a)) xs (xs (^ _ xs xs)))
(= (nil? (List a) Bool) xs (=? nil xs))


;; option
(=u (some a (Option a)) x x)
(=u (none (Option a)) 'nil)
(=u (some? (Option a) Bool) x (not (=? x 'nil)))
(=u (none? (Option a) Bool) x (=? x 'nil))
(=  (pull (Option a) a) x x)
(=  (opt>>= (Option a) (Fn a (Option a)) (Option a))
             opt f (none? opt none (f (pull opt))))


;;Y-combinator
;;(= (Y (Fn a a) a) x (x (Y x)))
;;(Y (^ f f)) ;now f refers to the function itself
(= (Y (Fn a a) a)
   f ((^ x (f (x x))) (^ x (f (x x)))))

;;predicates -- ideally, we don't need these
(= (string? _        Bool) _ false)
(= (string? String   Bool) _ true)
(= (number? _        Bool) _ false)
(= (number? Number   Bool) _ true)
(= (keyword? _       Bool) _ false)
(= (keyword? Keyword Bool) _ true)
(= (list? _          Bool) _ false)
(= (list? (List a)   Bool) _ true)

;;show -- example of a generic function
(= (show String String)  x x)
(= (show Number String)  num->str)
(= (show Keyword String) x (++ ":" (kw->str x)))
(= (show Symbol String)  x (** symbol->string x))
(= (show (List Number) String)
   xs
   (nil? xs "[]"
         (+++ (show (car xs)) " : " (show (cdr xs)))))
(= (show (Option String) String)
   x
   (show (pull x)))
(= (show (Option Number) String)
   x
   (show (pull x)))
(= (show (Map Number Number) String)
   xs
   (+++ "[ " (show-map-content xs) "]"))
(= (show (Map Keyword String) String)
   xs
   (+++ "[ " (show-map-content xs) "]"))


(= (show-map-content (Map Number Number) String)
   xs
   (nil? xs ""
         (+++ (+++ "(" (+++ (show (fst (car xs))) " . " (show (snd (car xs)))) ")")
              " "
              (show-map-content (cdr xs)))))

(= (show-map-content (Map Keyword String) String)
   xs
   (nil? xs ""
         (+++ (+++ "(" (+++ (show (fst (car xs))) " . " (show (snd (car xs)))) ")")
              " "
              (show-map-content (cdr xs)))))


(= (+++ String String String String) s1 s2 s3
   (++ (++ s1 s2) s3))

;;primitive wrapper
(= (=? a a Bool)
   x y (** c-equal? x y))
(= (< Number Number Bool)
   x y (** c-< x y))
(= (> Number Number Bool)
   x y (** c-> x y))
(= (<= Number Number Bool)
   x y (** c-<= x y))
(= (>= Number Number Bool)
   x y (** c->= x y))
(= (+ Number Number Number)
   x y (** c-+ x y))
(= (- Number Number Number)
   x y (** c-- x y))
(= (* Number Number Number)
   x y (** c-* x y))
(= (/ Number Number Number)
   x y (** c-/ x y))
(= (% Number Number Number)
   x y (** c-mod x y))
(= (++ String String String)
   x y (** c-string-append x y))
(= (num->str Number String)
   x (** number->string x))
(= (kw->str Keyword String)
   x (** keyword->string x))


;;; I/O
(synonym Time Number)

(= (print Time String Time)
   time str (** timed-print time str))
(= (read Time String) t
   (** read- t))


;;help
(= (help String)
   "

|  SYNTAX
|  ------
|  ;; declare the type <t> as an alias of <t'>
|  (synonym <t> <t'>)
|
|  ;; define a generic function
|  (= (<name> <in-type>... <out-type>)
|     <parameter>...
|     <expression>)
|
|  ;; define a constructor for <type>
|  (=u (<name> <in-type>... <type>)
|     <parameter>...
|     <expression>)
|
|  ;; lambda expression
|  (^ <parameter>... <expression>)
|
|  ;; function application
|  (<function> <argument>...)
|
|  ;; literals
|  \\\"string\\\" 123456 'symbol :keyword
|
|  FEATURE
|  -------
|  * Purely functional
|  * Default lazy evaluation
|  * Default currying
|  * Static type checking
|  * Statically resolved multimethod
|  * Timed I/O
|
|  REPL
|  ----
|  ^C   -- Exit
|  help -- See this help
|  <function-name> -- See the usage of the function (through its type)

")

(= (language String)
   "Carrot")

(= (version String)
   "2.2.0")

(= (code-name String)
   "Netherland Dwarf")

(= (info (Map Keyword String))
   (cons (pair :language  language)
               (cons (pair :version   version)
                     (cons (pair :code-name code-name) nil))))
